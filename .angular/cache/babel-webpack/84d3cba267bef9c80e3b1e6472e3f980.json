{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewChild, Output, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"zoomContainer\"];\nconst _c1 = [\"imageThumbnail\"];\nconst _c2 = [\"fullSizeImage\"];\n\nconst _c3 = function (a1) {\n  return {\n    ngxImageZoomFullContainer: true,\n    ngxImageZoomLensEnabled: a1\n  };\n};\n\nclass NgxImageZoomComponent {\n  constructor(renderer, changeDetectorRef) {\n    this.renderer = renderer;\n    this.changeDetectorRef = changeDetectorRef;\n    this.zoomScroll = new EventEmitter();\n    this.zoomPosition = new EventEmitter();\n    this.imagesLoaded = new EventEmitter();\n    this.enableLens = false;\n    this.lensBorderRadius = 0;\n    this.thumbWidth = 0;\n    this.thumbHeight = 0;\n    this.fullWidth = 0;\n    this.fullHeight = 0;\n    this.lensWidth = 100;\n    this.lensHeight = 100;\n    this.zoomMode = 'hover';\n    this.magnification = 1;\n    this.enableScrollZoom = false;\n    this.scrollStepSize = 0.1;\n    this.circularLens = false;\n    this.minZoomRatio = 1;\n    this.maxZoomRatio = 2;\n    this.xRatio = 0;\n    this.yRatio = 0;\n    this.zoomingEnabled = false;\n    this.zoomFrozen = false;\n    this.isReady = false;\n    this.thumbImageLoaded = false;\n    this.fullImageLoaded = false;\n    this.latestMouseLeft = -1;\n    this.latestMouseTop = -1;\n    this.eventListeners = [];\n    this.altText = '';\n    this.titleText = '';\n  }\n\n  set setThumbImage(thumbImage) {\n    this.thumbImageLoaded = false;\n    this.setIsReady(false);\n    this.thumbImage = thumbImage;\n  }\n\n  set setFullImage(fullImage) {\n    this.fullImageLoaded = false;\n    this.setIsReady(false);\n    this.fullImage = fullImage;\n  }\n\n  set setZoomMode(zoomMode) {\n    if (NgxImageZoomComponent.validZoomModes.some(m => m === zoomMode)) {\n      this.zoomMode = zoomMode;\n    }\n  }\n\n  set setMagnification(magnification) {\n    this.magnification = Number(magnification) || this.magnification;\n    this.zoomScroll.emit(this.magnification);\n  }\n\n  set setMinZoomRatio(minZoomRatio) {\n    const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;\n    this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);\n  }\n\n  set setMaxZoomRatio(maxZoomRatio) {\n    this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;\n  }\n\n  set setScrollStepSize(stepSize) {\n    this.scrollStepSize = Number(stepSize) || this.scrollStepSize;\n  }\n\n  set setEnableLens(enable) {\n    this.enableLens = Boolean(enable);\n  }\n\n  set setLensWidth(width) {\n    this.lensWidth = Number(width) || this.lensWidth;\n  }\n\n  set setLensHeight(height) {\n    this.lensHeight = Number(height) || this.lensHeight;\n  }\n\n  set setCircularLens(enable) {\n    this.circularLens = Boolean(enable);\n  }\n\n  set setEnableScrollZoom(enable) {\n    this.enableScrollZoom = Boolean(enable);\n  }\n\n  ngOnInit() {\n    this.setUpEventListeners();\n  }\n\n  ngOnChanges() {\n    if (this.enableLens) {\n      if (this.circularLens) {\n        this.lensBorderRadius = this.lensWidth / 2;\n      } else {\n        this.lensBorderRadius = 0;\n      }\n    }\n\n    this.calculateRatioAndOffset();\n    this.calculateImageAndLensPosition();\n  }\n\n  ngOnDestroy() {\n    this.eventListeners.forEach(destroyFn => destroyFn());\n  }\n  /**\r\n   * Template helper methods\r\n   */\n\n\n  onThumbImageLoaded() {\n    this.thumbImageLoaded = true;\n    this.checkImagesLoaded();\n  }\n\n  onFullImageLoaded() {\n    this.fullImageLoaded = true;\n    this.checkImagesLoaded();\n  }\n\n  setUpEventListeners() {\n    const nativeElement = this.zoomContainer.nativeElement;\n\n    switch (this.zoomMode) {\n      case 'hover':\n        this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', event => this.hoverMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.hoverMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', event => this.hoverMouseMove(event)));\n        break;\n\n      case 'toggle':\n        this.eventListeners.push(this.renderer.listen(nativeElement, 'click', event => this.toggleClick(event)));\n        break;\n\n      case 'toggle-click':\n        this.eventListeners.push(this.renderer.listen(nativeElement, 'click', event => this.toggleClick(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', event => this.clickMouseMove(event)));\n        break;\n\n      case 'click':\n        this.eventListeners.push(this.renderer.listen(nativeElement, 'click', event => this.clickStarter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', event => this.clickMouseMove(event)));\n        break;\n\n      case 'hover-freeze':\n        this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', event => this.hoverFreezeMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.hoverFreezeMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', event => this.hoverFreezeMouseMove(event)), this.renderer.listen(nativeElement, 'click', event => this.hoverFreezeClick(event)));\n    }\n\n    if (this.enableScrollZoom) {\n      // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'\n      this.eventListeners.push(this.renderer.listen(nativeElement, 'mousewheel', event => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'DOMMouseScroll', event => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'onmousewheel', event => this.onMouseWheel(event)));\n    }\n\n    if (this.enableLens && this.circularLens) {\n      this.lensBorderRadius = this.lensWidth / 2;\n    }\n  }\n\n  checkImagesLoaded() {\n    this.calculateRatioAndOffset();\n\n    if (this.thumbImageLoaded && this.fullImageLoaded) {\n      this.calculateImageAndLensPosition();\n      this.setIsReady(true);\n    }\n  }\n\n  setIsReady(value) {\n    this.isReady = value;\n    this.imagesLoaded.emit(value);\n  }\n  /**\r\n   * Zoom position setters\r\n   */\n\n\n  setZoomPosition(left, top) {\n    this.latestMouseLeft = Number(left) || this.latestMouseLeft;\n    this.latestMouseTop = Number(top) || this.latestMouseTop;\n    const c = {\n      x: this.latestMouseLeft,\n      y: this.latestMouseTop\n    };\n    this.zoomPosition.emit(c);\n  }\n  /**\r\n   * Mouse wheel event\r\n   */\n\n\n  onMouseWheel(event) {\n    // Don't eat events if zooming isn't active\n    if (!this.zoomingEnabled || this.zoomFrozen) {\n      return;\n    }\n\n    event = window.event || event; // old IE\n\n    const direction = Math.max(Math.min(event.wheelDelta || -event.detail, 1), -1);\n\n    if (direction > 0) {\n      // up\n      this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);\n    } else {\n      // down\n      this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);\n    }\n\n    this.calculateRatio();\n    this.calculateZoomPosition(event); // Prevent scrolling on page.\n\n    event.returnValue = false; // IE\n\n    if (event.preventDefault) {\n      event.preventDefault(); // Chrome & FF\n    }\n  }\n  /**\r\n   * Hover mode\r\n   */\n\n\n  hoverMouseEnter(event) {\n    this.zoomOn(event);\n  }\n\n  hoverMouseLeave() {\n    this.zoomOff();\n  }\n\n  hoverMouseMove(event) {\n    this.calculateZoomPosition(event);\n  }\n  /**\r\n   * Toggle mode\r\n   */\n\n\n  toggleClick(event) {\n    if (this.zoomingEnabled) {\n      this.zoomOff();\n    } else {\n      this.zoomOn(event);\n    }\n  }\n  /**\r\n   * Click mode\r\n   */\n\n\n  clickStarter(event) {\n    if (this.zoomingEnabled === false) {\n      this.zoomOn(event);\n    }\n  }\n\n  clickMouseLeave() {\n    this.zoomOff();\n  }\n\n  clickMouseMove(event) {\n    if (this.zoomingEnabled) {\n      this.calculateZoomPosition(event);\n    }\n  }\n  /**\r\n   * Hover freeze mode\r\n   */\n\n\n  hoverFreezeMouseEnter(event) {\n    if (this.zoomingEnabled && !this.zoomFrozen) {\n      this.zoomOn(event);\n    }\n  }\n\n  hoverFreezeMouseLeave() {\n    if (this.zoomingEnabled && !this.zoomFrozen) {\n      this.zoomOff();\n    }\n  }\n\n  hoverFreezeMouseMove(event) {\n    if (this.zoomingEnabled && !this.zoomFrozen) {\n      this.calculateZoomPosition(event);\n    }\n  }\n\n  hoverFreezeClick(event) {\n    if (this.zoomingEnabled && this.zoomFrozen) {\n      this.zoomFrozen = false;\n      this.zoomOff();\n    } else if (this.zoomingEnabled) {\n      this.zoomFrozen = true;\n      this.changeDetectorRef.markForCheck();\n    } else {\n      this.zoomOn(event);\n    }\n  }\n  /**\r\n   * Private helper methods\r\n   */\n\n\n  zoomOn(event) {\n    if (this.isReady) {\n      this.zoomingEnabled = true;\n      this.calculateRatioAndOffset();\n      this.display = 'block';\n      this.calculateZoomPosition(event);\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n  zoomOff() {\n    this.zoomingEnabled = false;\n    this.display = 'none';\n    this.changeDetectorRef.markForCheck();\n  }\n\n  calculateZoomPosition(event) {\n    const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);\n    const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);\n    this.setZoomPosition(newLeft, newTop);\n    this.calculateImageAndLensPosition();\n    this.changeDetectorRef.markForCheck();\n  }\n\n  calculateImageAndLensPosition() {\n    let lensLeftMod = 0;\n    let lensTopMod = 0;\n\n    if (this.enableLens && this.latestMouseLeft > 0) {\n      lensLeftMod = this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;\n      lensTopMod = this.lensTop = this.latestMouseTop - this.lensHeight / 2;\n    }\n\n    this.fullImageLeft = this.latestMouseLeft * -this.xRatio - lensLeftMod;\n    this.fullImageTop = this.latestMouseTop * -this.yRatio - lensTopMod;\n  }\n\n  calculateRatioAndOffset() {\n    this.thumbWidth = this.imageThumbnail.nativeElement.width;\n    this.thumbHeight = this.imageThumbnail.nativeElement.height; // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb\n\n    if (!this.enableLens) {\n      this.lensWidth = this.thumbWidth;\n      this.lensHeight = this.thumbHeight;\n      this.lensLeft = 0;\n      this.lensTop = 0;\n    } // getBoundingClientRect() ? https://stackoverflow.com/a/44008873\n\n\n    this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;\n    this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;\n\n    if (this.fullImage === undefined) {\n      this.fullImage = this.thumbImage;\n    }\n\n    if (this.fullImageLoaded) {\n      this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;\n      this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;\n      this.baseRatio = Math.max(this.thumbWidth / this.fullWidth, this.thumbHeight / this.fullHeight); // Don't allow zooming to smaller than thumbnail size\n\n      this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);\n      this.calculateRatio();\n    }\n  }\n\n  calculateRatio() {\n    this.magnifiedWidth = this.fullWidth * this.magnification;\n    this.magnifiedHeight = this.fullHeight * this.magnification;\n    this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;\n    this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;\n  }\n\n}\n\nNgxImageZoomComponent.validZoomModes = ['hover', 'toggle', 'click', 'toggle-click', 'hover-freeze'];\n\nNgxImageZoomComponent.ɵfac = function NgxImageZoomComponent_Factory(t) {\n  return new (t || NgxImageZoomComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNgxImageZoomComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxImageZoomComponent,\n  selectors: [[\"lib-ngx-image-zoom\"]],\n  viewQuery: function NgxImageZoomComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n      i0.ɵɵviewQuery(_c2, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.zoomContainer = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imageThumbnail = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fullSizeImage = _t.first);\n    }\n  },\n  inputs: {\n    setThumbImage: [\"thumbImage\", \"setThumbImage\"],\n    setFullImage: [\"fullImage\", \"setFullImage\"],\n    setZoomMode: [\"zoomMode\", \"setZoomMode\"],\n    setMagnification: [\"magnification\", \"setMagnification\"],\n    setMinZoomRatio: [\"minZoomRatio\", \"setMinZoomRatio\"],\n    setMaxZoomRatio: [\"maxZoomRatio\", \"setMaxZoomRatio\"],\n    setScrollStepSize: [\"scrollStepSize\", \"setScrollStepSize\"],\n    setEnableLens: [\"enableLens\", \"setEnableLens\"],\n    setLensWidth: [\"lensWidth\", \"setLensWidth\"],\n    setLensHeight: [\"lensHeight\", \"setLensHeight\"],\n    setCircularLens: [\"circularLens\", \"setCircularLens\"],\n    setEnableScrollZoom: [\"enableScrollZoom\", \"setEnableScrollZoom\"],\n    altText: \"altText\",\n    titleText: \"titleText\"\n  },\n  outputs: {\n    zoomScroll: \"zoomScroll\",\n    zoomPosition: \"zoomPosition\",\n    imagesLoaded: \"imagesLoaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 35,\n  consts: [[1, \"ngxImageZoomContainer\"], [\"zoomContainer\", \"\"], [1, \"ngxImageZoomThumbnail\", 3, \"alt\", \"title\", \"src\", \"load\"], [\"imageThumbnail\", \"\"], [3, \"ngClass\"], [1, \"ngxImageZoomFull\", 3, \"alt\", \"title\", \"src\", \"load\"], [\"fullSizeImage\", \"\"]],\n  template: function NgxImageZoomComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"img\", 2, 3);\n      i0.ɵɵlistener(\"load\", function NgxImageZoomComponent_Template_img_load_2_listener() {\n        return ctx.onThumbImageLoaded();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4);\n      i0.ɵɵelementStart(5, \"img\", 5, 6);\n      i0.ɵɵlistener(\"load\", function NgxImageZoomComponent_Template_img_load_5_listener() {\n        return ctx.onFullImageLoaded();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.thumbWidth, \"px\")(\"height\", ctx.thumbHeight, \"px\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"alt\", ctx.altText)(\"title\", ctx.titleText)(\"src\", ctx.thumbImage, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"display\", ctx.display)(\"top\", ctx.lensTop, \"px\")(\"left\", ctx.lensLeft, \"px\")(\"width\", ctx.lensWidth, \"px\")(\"height\", ctx.lensHeight, \"px\")(\"border-radius\", ctx.lensBorderRadius, \"px\");\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(33, _c3, ctx.enableLens));\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"display\", ctx.display)(\"top\", ctx.fullImageTop, \"px\")(\"left\", ctx.fullImageLeft, \"px\")(\"width\", ctx.magnifiedWidth, \"px\")(\"height\", ctx.magnifiedHeight, \"px\");\n      i0.ɵɵproperty(\"alt\", ctx.altText)(\"title\", ctx.titleText)(\"src\", ctx.fullImage, i0.ɵɵsanitizeUrl);\n    }\n  },\n  directives: [i1.NgClass],\n  styles: [\".ngxImageZoomContainer[_ngcontent-%COMP%]{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail[_ngcontent-%COMP%]{pointer-events:all}.ngxImageZoomFull[_ngcontent-%COMP%]{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer[_ngcontent-%COMP%]{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled[_ngcontent-%COMP%]{border:2px solid red;cursor:crosshair;pointer-events:none}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageZoomComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-ngx-image-zoom',\n      template: \"<div\\n    #zoomContainer\\n    class=\\\"ngxImageZoomContainer\\\"\\n    [style.width.px]=\\\"this.thumbWidth\\\"\\n    [style.height.px]=\\\"this.thumbHeight\\\"\\n>\\n    <img\\n        #imageThumbnail\\n        class=\\\"ngxImageZoomThumbnail\\\"\\n        [alt]=\\\"altText\\\"\\n        [title]=\\\"titleText\\\"\\n        [src]=\\\"thumbImage\\\"\\n        (load)=\\\"onThumbImageLoaded()\\\"\\n    />\\n\\n    <div\\n        [ngClass]=\\\"{\\n            ngxImageZoomFullContainer: true,\\n            ngxImageZoomLensEnabled: this.enableLens\\n        }\\\"\\n        [style.display]=\\\"this.display\\\"\\n        [style.top.px]=\\\"this.lensTop\\\"\\n        [style.left.px]=\\\"this.lensLeft\\\"\\n        [style.width.px]=\\\"this.lensWidth\\\"\\n        [style.height.px]=\\\"this.lensHeight\\\"\\n        [style.border-radius.px]=\\\"this.lensBorderRadius\\\"\\n    >\\n        <img\\n            #fullSizeImage\\n            class=\\\"ngxImageZoomFull\\\"\\n            [alt]=\\\"altText\\\"\\n            [title]=\\\"titleText\\\"\\n            [src]=\\\"fullImage\\\"\\n            (load)=\\\"onFullImageLoaded()\\\"\\n            [style.display]=\\\"this.display\\\"\\n            [style.top.px]=\\\"this.fullImageTop\\\"\\n            [style.left.px]=\\\"this.fullImageLeft\\\"\\n            [style.width.px]=\\\"this.magnifiedWidth\\\"\\n            [style.height.px]=\\\"this.magnifiedHeight\\\"\\n        />\\n    </div>\\n</div>\\n\",\n      styles: [\".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    zoomContainer: [{\n      type: ViewChild,\n      args: ['zoomContainer', {\n        static: true\n      }]\n    }],\n    imageThumbnail: [{\n      type: ViewChild,\n      args: ['imageThumbnail', {\n        static: true\n      }]\n    }],\n    fullSizeImage: [{\n      type: ViewChild,\n      args: ['fullSizeImage', {\n        static: true\n      }]\n    }],\n    zoomScroll: [{\n      type: Output\n    }],\n    zoomPosition: [{\n      type: Output\n    }],\n    imagesLoaded: [{\n      type: Output\n    }],\n    setThumbImage: [{\n      type: Input,\n      args: ['thumbImage']\n    }],\n    setFullImage: [{\n      type: Input,\n      args: ['fullImage']\n    }],\n    setZoomMode: [{\n      type: Input,\n      args: ['zoomMode']\n    }],\n    setMagnification: [{\n      type: Input,\n      args: ['magnification']\n    }],\n    setMinZoomRatio: [{\n      type: Input,\n      args: ['minZoomRatio']\n    }],\n    setMaxZoomRatio: [{\n      type: Input,\n      args: ['maxZoomRatio']\n    }],\n    setScrollStepSize: [{\n      type: Input,\n      args: ['scrollStepSize']\n    }],\n    setEnableLens: [{\n      type: Input,\n      args: ['enableLens']\n    }],\n    setLensWidth: [{\n      type: Input,\n      args: ['lensWidth']\n    }],\n    setLensHeight: [{\n      type: Input,\n      args: ['lensHeight']\n    }],\n    setCircularLens: [{\n      type: Input,\n      args: ['circularLens']\n    }],\n    setEnableScrollZoom: [{\n      type: Input,\n      args: ['enableScrollZoom']\n    }],\n    altText: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxImageZoomModule {}\n\nNgxImageZoomModule.ɵfac = function NgxImageZoomModule_Factory(t) {\n  return new (t || NgxImageZoomModule)();\n};\n\nNgxImageZoomModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxImageZoomModule\n});\nNgxImageZoomModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageZoomModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxImageZoomComponent],\n      imports: [CommonModule],\n      exports: [NgxImageZoomComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-image-zoom\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxImageZoomComponent, NgxImageZoomModule };","map":{"version":3,"sources":["D:/Web/Angular/YuGiOh-Deck/node_modules/ngx-image-zoom/fesm2020/ngx-image-zoom.mjs"],"names":["i0","EventEmitter","Component","ViewChild","Output","Input","NgModule","i1","CommonModule","NgxImageZoomComponent","constructor","renderer","changeDetectorRef","zoomScroll","zoomPosition","imagesLoaded","enableLens","lensBorderRadius","thumbWidth","thumbHeight","fullWidth","fullHeight","lensWidth","lensHeight","zoomMode","magnification","enableScrollZoom","scrollStepSize","circularLens","minZoomRatio","maxZoomRatio","xRatio","yRatio","zoomingEnabled","zoomFrozen","isReady","thumbImageLoaded","fullImageLoaded","latestMouseLeft","latestMouseTop","eventListeners","altText","titleText","setThumbImage","thumbImage","setIsReady","setFullImage","fullImage","setZoomMode","validZoomModes","some","m","setMagnification","Number","emit","setMinZoomRatio","ratio","baseRatio","Math","max","setMaxZoomRatio","setScrollStepSize","stepSize","setEnableLens","enable","Boolean","setLensWidth","width","setLensHeight","height","setCircularLens","setEnableScrollZoom","ngOnInit","setUpEventListeners","ngOnChanges","calculateRatioAndOffset","calculateImageAndLensPosition","ngOnDestroy","forEach","destroyFn","onThumbImageLoaded","checkImagesLoaded","onFullImageLoaded","nativeElement","zoomContainer","push","listen","event","hoverMouseEnter","hoverMouseLeave","hoverMouseMove","toggleClick","clickMouseLeave","clickMouseMove","clickStarter","hoverFreezeMouseEnter","hoverFreezeMouseLeave","hoverFreezeMouseMove","hoverFreezeClick","onMouseWheel","value","setZoomPosition","left","top","c","x","y","window","direction","min","wheelDelta","detail","calculateRatio","calculateZoomPosition","returnValue","preventDefault","zoomOn","zoomOff","markForCheck","display","newLeft","offsetX","newTop","offsetY","lensLeftMod","lensTopMod","lensLeft","lensTop","fullImageLeft","fullImageTop","imageThumbnail","offsetTop","getBoundingClientRect","offsetLeft","undefined","fullSizeImage","naturalWidth","naturalHeight","magnifiedWidth","magnifiedHeight","ɵfac","Renderer2","ChangeDetectorRef","ɵcmp","NgClass","type","args","selector","template","styles","static","NgxImageZoomModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewChild, Output, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgxImageZoomComponent {\r\n    constructor(renderer, changeDetectorRef) {\r\n        this.renderer = renderer;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.zoomScroll = new EventEmitter();\r\n        this.zoomPosition = new EventEmitter();\r\n        this.imagesLoaded = new EventEmitter();\r\n        this.enableLens = false;\r\n        this.lensBorderRadius = 0;\r\n        this.thumbWidth = 0;\r\n        this.thumbHeight = 0;\r\n        this.fullWidth = 0;\r\n        this.fullHeight = 0;\r\n        this.lensWidth = 100;\r\n        this.lensHeight = 100;\r\n        this.zoomMode = 'hover';\r\n        this.magnification = 1;\r\n        this.enableScrollZoom = false;\r\n        this.scrollStepSize = 0.1;\r\n        this.circularLens = false;\r\n        this.minZoomRatio = 1;\r\n        this.maxZoomRatio = 2;\r\n        this.xRatio = 0;\r\n        this.yRatio = 0;\r\n        this.zoomingEnabled = false;\r\n        this.zoomFrozen = false;\r\n        this.isReady = false;\r\n        this.thumbImageLoaded = false;\r\n        this.fullImageLoaded = false;\r\n        this.latestMouseLeft = -1;\r\n        this.latestMouseTop = -1;\r\n        this.eventListeners = [];\r\n        this.altText = '';\r\n        this.titleText = '';\r\n    }\r\n    set setThumbImage(thumbImage) {\r\n        this.thumbImageLoaded = false;\r\n        this.setIsReady(false);\r\n        this.thumbImage = thumbImage;\r\n    }\r\n    set setFullImage(fullImage) {\r\n        this.fullImageLoaded = false;\r\n        this.setIsReady(false);\r\n        this.fullImage = fullImage;\r\n    }\r\n    set setZoomMode(zoomMode) {\r\n        if (NgxImageZoomComponent.validZoomModes.some(m => m === zoomMode)) {\r\n            this.zoomMode = zoomMode;\r\n        }\r\n    }\r\n    set setMagnification(magnification) {\r\n        this.magnification = Number(magnification) || this.magnification;\r\n        this.zoomScroll.emit(this.magnification);\r\n    }\r\n    set setMinZoomRatio(minZoomRatio) {\r\n        const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;\r\n        this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);\r\n    }\r\n    set setMaxZoomRatio(maxZoomRatio) {\r\n        this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;\r\n    }\r\n    set setScrollStepSize(stepSize) {\r\n        this.scrollStepSize = Number(stepSize) || this.scrollStepSize;\r\n    }\r\n    set setEnableLens(enable) {\r\n        this.enableLens = Boolean(enable);\r\n    }\r\n    set setLensWidth(width) {\r\n        this.lensWidth = Number(width) || this.lensWidth;\r\n    }\r\n    set setLensHeight(height) {\r\n        this.lensHeight = Number(height) || this.lensHeight;\r\n    }\r\n    set setCircularLens(enable) {\r\n        this.circularLens = Boolean(enable);\r\n    }\r\n    set setEnableScrollZoom(enable) {\r\n        this.enableScrollZoom = Boolean(enable);\r\n    }\r\n    ngOnInit() {\r\n        this.setUpEventListeners();\r\n    }\r\n    ngOnChanges() {\r\n        if (this.enableLens) {\r\n            if (this.circularLens) {\r\n                this.lensBorderRadius = this.lensWidth / 2;\r\n            }\r\n            else {\r\n                this.lensBorderRadius = 0;\r\n            }\r\n        }\r\n        this.calculateRatioAndOffset();\r\n        this.calculateImageAndLensPosition();\r\n    }\r\n    ngOnDestroy() {\r\n        this.eventListeners.forEach((destroyFn) => destroyFn());\r\n    }\r\n    /**\r\n     * Template helper methods\r\n     */\r\n    onThumbImageLoaded() {\r\n        this.thumbImageLoaded = true;\r\n        this.checkImagesLoaded();\r\n    }\r\n    onFullImageLoaded() {\r\n        this.fullImageLoaded = true;\r\n        this.checkImagesLoaded();\r\n    }\r\n    setUpEventListeners() {\r\n        const nativeElement = this.zoomContainer.nativeElement;\r\n        switch (this.zoomMode) {\r\n            case 'hover':\r\n                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.hoverMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.hoverMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.hoverMouseMove(event)));\r\n                break;\r\n            case 'toggle':\r\n                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.toggleClick(event)));\r\n                break;\r\n            case 'toggle-click':\r\n                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.toggleClick(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));\r\n                break;\r\n            case 'click':\r\n                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.clickStarter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));\r\n                break;\r\n            case 'hover-freeze':\r\n                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.hoverFreezeMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.hoverFreezeMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.hoverFreezeMouseMove(event)), this.renderer.listen(nativeElement, 'click', (event) => this.hoverFreezeClick(event)));\r\n        }\r\n        if (this.enableScrollZoom) {\r\n            // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'\r\n            this.eventListeners.push(this.renderer.listen(nativeElement, 'mousewheel', (event) => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'DOMMouseScroll', (event) => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'onmousewheel', (event) => this.onMouseWheel(event)));\r\n        }\r\n        if (this.enableLens && this.circularLens) {\r\n            this.lensBorderRadius = this.lensWidth / 2;\r\n        }\r\n    }\r\n    checkImagesLoaded() {\r\n        this.calculateRatioAndOffset();\r\n        if (this.thumbImageLoaded && this.fullImageLoaded) {\r\n            this.calculateImageAndLensPosition();\r\n            this.setIsReady(true);\r\n        }\r\n    }\r\n    setIsReady(value) {\r\n        this.isReady = value;\r\n        this.imagesLoaded.emit(value);\r\n    }\r\n    /**\r\n     * Zoom position setters\r\n     */\r\n    setZoomPosition(left, top) {\r\n        this.latestMouseLeft = Number(left) || this.latestMouseLeft;\r\n        this.latestMouseTop = Number(top) || this.latestMouseTop;\r\n        const c = {\r\n            x: this.latestMouseLeft,\r\n            y: this.latestMouseTop\r\n        };\r\n        this.zoomPosition.emit(c);\r\n    }\r\n    /**\r\n     * Mouse wheel event\r\n     */\r\n    onMouseWheel(event) {\r\n        // Don't eat events if zooming isn't active\r\n        if (!this.zoomingEnabled || this.zoomFrozen) {\r\n            return;\r\n        }\r\n        event = window.event || event; // old IE\r\n        const direction = Math.max(Math.min((event.wheelDelta || -event.detail), 1), -1);\r\n        if (direction > 0) {\r\n            // up\r\n            this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);\r\n        }\r\n        else {\r\n            // down\r\n            this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);\r\n        }\r\n        this.calculateRatio();\r\n        this.calculateZoomPosition(event);\r\n        // Prevent scrolling on page.\r\n        event.returnValue = false; // IE\r\n        if (event.preventDefault) {\r\n            event.preventDefault(); // Chrome & FF\r\n        }\r\n    }\r\n    /**\r\n     * Hover mode\r\n     */\r\n    hoverMouseEnter(event) {\r\n        this.zoomOn(event);\r\n    }\r\n    hoverMouseLeave() {\r\n        this.zoomOff();\r\n    }\r\n    hoverMouseMove(event) {\r\n        this.calculateZoomPosition(event);\r\n    }\r\n    /**\r\n     * Toggle mode\r\n     */\r\n    toggleClick(event) {\r\n        if (this.zoomingEnabled) {\r\n            this.zoomOff();\r\n        }\r\n        else {\r\n            this.zoomOn(event);\r\n        }\r\n    }\r\n    /**\r\n     * Click mode\r\n     */\r\n    clickStarter(event) {\r\n        if (this.zoomingEnabled === false) {\r\n            this.zoomOn(event);\r\n        }\r\n    }\r\n    clickMouseLeave() {\r\n        this.zoomOff();\r\n    }\r\n    clickMouseMove(event) {\r\n        if (this.zoomingEnabled) {\r\n            this.calculateZoomPosition(event);\r\n        }\r\n    }\r\n    /**\r\n     * Hover freeze mode\r\n     */\r\n    hoverFreezeMouseEnter(event) {\r\n        if (this.zoomingEnabled && !this.zoomFrozen) {\r\n            this.zoomOn(event);\r\n        }\r\n    }\r\n    hoverFreezeMouseLeave() {\r\n        if (this.zoomingEnabled && !this.zoomFrozen) {\r\n            this.zoomOff();\r\n        }\r\n    }\r\n    hoverFreezeMouseMove(event) {\r\n        if (this.zoomingEnabled && !this.zoomFrozen) {\r\n            this.calculateZoomPosition(event);\r\n        }\r\n    }\r\n    hoverFreezeClick(event) {\r\n        if (this.zoomingEnabled && this.zoomFrozen) {\r\n            this.zoomFrozen = false;\r\n            this.zoomOff();\r\n        }\r\n        else if (this.zoomingEnabled) {\r\n            this.zoomFrozen = true;\r\n            this.changeDetectorRef.markForCheck();\r\n        }\r\n        else {\r\n            this.zoomOn(event);\r\n        }\r\n    }\r\n    /**\r\n     * Private helper methods\r\n     */\r\n    zoomOn(event) {\r\n        if (this.isReady) {\r\n            this.zoomingEnabled = true;\r\n            this.calculateRatioAndOffset();\r\n            this.display = 'block';\r\n            this.calculateZoomPosition(event);\r\n            this.changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    zoomOff() {\r\n        this.zoomingEnabled = false;\r\n        this.display = 'none';\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n    calculateZoomPosition(event) {\r\n        const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);\r\n        const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);\r\n        this.setZoomPosition(newLeft, newTop);\r\n        this.calculateImageAndLensPosition();\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n    calculateImageAndLensPosition() {\r\n        let lensLeftMod = 0;\r\n        let lensTopMod = 0;\r\n        if (this.enableLens && this.latestMouseLeft > 0) {\r\n            lensLeftMod = this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;\r\n            lensTopMod = this.lensTop = this.latestMouseTop - this.lensHeight / 2;\r\n        }\r\n        this.fullImageLeft = (this.latestMouseLeft * -this.xRatio) - lensLeftMod;\r\n        this.fullImageTop = (this.latestMouseTop * -this.yRatio) - lensTopMod;\r\n    }\r\n    calculateRatioAndOffset() {\r\n        this.thumbWidth = this.imageThumbnail.nativeElement.width;\r\n        this.thumbHeight = this.imageThumbnail.nativeElement.height;\r\n        // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb\r\n        if (!this.enableLens) {\r\n            this.lensWidth = this.thumbWidth;\r\n            this.lensHeight = this.thumbHeight;\r\n            this.lensLeft = 0;\r\n            this.lensTop = 0;\r\n        }\r\n        // getBoundingClientRect() ? https://stackoverflow.com/a/44008873\r\n        this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;\r\n        this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;\r\n        if (this.fullImage === undefined) {\r\n            this.fullImage = this.thumbImage;\r\n        }\r\n        if (this.fullImageLoaded) {\r\n            this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;\r\n            this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;\r\n            this.baseRatio = Math.max((this.thumbWidth / this.fullWidth), (this.thumbHeight / this.fullHeight));\r\n            // Don't allow zooming to smaller than thumbnail size\r\n            this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);\r\n            this.calculateRatio();\r\n        }\r\n    }\r\n    calculateRatio() {\r\n        this.magnifiedWidth = (this.fullWidth * this.magnification);\r\n        this.magnifiedHeight = (this.fullHeight * this.magnification);\r\n        this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;\r\n        this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;\r\n    }\r\n}\r\nNgxImageZoomComponent.validZoomModes = ['hover', 'toggle', 'click', 'toggle-click', 'hover-freeze'];\r\nNgxImageZoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NgxImageZoomComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxImageZoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.5\", type: NgxImageZoomComponent, selector: \"lib-ngx-image-zoom\", inputs: { setThumbImage: [\"thumbImage\", \"setThumbImage\"], setFullImage: [\"fullImage\", \"setFullImage\"], setZoomMode: [\"zoomMode\", \"setZoomMode\"], setMagnification: [\"magnification\", \"setMagnification\"], setMinZoomRatio: [\"minZoomRatio\", \"setMinZoomRatio\"], setMaxZoomRatio: [\"maxZoomRatio\", \"setMaxZoomRatio\"], setScrollStepSize: [\"scrollStepSize\", \"setScrollStepSize\"], setEnableLens: [\"enableLens\", \"setEnableLens\"], setLensWidth: [\"lensWidth\", \"setLensWidth\"], setLensHeight: [\"lensHeight\", \"setLensHeight\"], setCircularLens: [\"circularLens\", \"setCircularLens\"], setEnableScrollZoom: [\"enableScrollZoom\", \"setEnableScrollZoom\"], altText: \"altText\", titleText: \"titleText\" }, outputs: { zoomScroll: \"zoomScroll\", zoomPosition: \"zoomPosition\", imagesLoaded: \"imagesLoaded\" }, viewQueries: [{ propertyName: \"zoomContainer\", first: true, predicate: [\"zoomContainer\"], descendants: true, static: true }, { propertyName: \"imageThumbnail\", first: true, predicate: [\"imageThumbnail\"], descendants: true, static: true }, { propertyName: \"fullSizeImage\", first: true, predicate: [\"fullSizeImage\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n    #zoomContainer\\n    class=\\\"ngxImageZoomContainer\\\"\\n    [style.width.px]=\\\"this.thumbWidth\\\"\\n    [style.height.px]=\\\"this.thumbHeight\\\"\\n>\\n    <img\\n        #imageThumbnail\\n        class=\\\"ngxImageZoomThumbnail\\\"\\n        [alt]=\\\"altText\\\"\\n        [title]=\\\"titleText\\\"\\n        [src]=\\\"thumbImage\\\"\\n        (load)=\\\"onThumbImageLoaded()\\\"\\n    />\\n\\n    <div\\n        [ngClass]=\\\"{\\n            ngxImageZoomFullContainer: true,\\n            ngxImageZoomLensEnabled: this.enableLens\\n        }\\\"\\n        [style.display]=\\\"this.display\\\"\\n        [style.top.px]=\\\"this.lensTop\\\"\\n        [style.left.px]=\\\"this.lensLeft\\\"\\n        [style.width.px]=\\\"this.lensWidth\\\"\\n        [style.height.px]=\\\"this.lensHeight\\\"\\n        [style.border-radius.px]=\\\"this.lensBorderRadius\\\"\\n    >\\n        <img\\n            #fullSizeImage\\n            class=\\\"ngxImageZoomFull\\\"\\n            [alt]=\\\"altText\\\"\\n            [title]=\\\"titleText\\\"\\n            [src]=\\\"fullImage\\\"\\n            (load)=\\\"onFullImageLoaded()\\\"\\n            [style.display]=\\\"this.display\\\"\\n            [style.top.px]=\\\"this.fullImageTop\\\"\\n            [style.left.px]=\\\"this.fullImageLeft\\\"\\n            [style.width.px]=\\\"this.magnifiedWidth\\\"\\n            [style.height.px]=\\\"this.magnifiedHeight\\\"\\n        />\\n    </div>\\n</div>\\n\", styles: [\".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\\n\"], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NgxImageZoomComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-ngx-image-zoom', template: \"<div\\n    #zoomContainer\\n    class=\\\"ngxImageZoomContainer\\\"\\n    [style.width.px]=\\\"this.thumbWidth\\\"\\n    [style.height.px]=\\\"this.thumbHeight\\\"\\n>\\n    <img\\n        #imageThumbnail\\n        class=\\\"ngxImageZoomThumbnail\\\"\\n        [alt]=\\\"altText\\\"\\n        [title]=\\\"titleText\\\"\\n        [src]=\\\"thumbImage\\\"\\n        (load)=\\\"onThumbImageLoaded()\\\"\\n    />\\n\\n    <div\\n        [ngClass]=\\\"{\\n            ngxImageZoomFullContainer: true,\\n            ngxImageZoomLensEnabled: this.enableLens\\n        }\\\"\\n        [style.display]=\\\"this.display\\\"\\n        [style.top.px]=\\\"this.lensTop\\\"\\n        [style.left.px]=\\\"this.lensLeft\\\"\\n        [style.width.px]=\\\"this.lensWidth\\\"\\n        [style.height.px]=\\\"this.lensHeight\\\"\\n        [style.border-radius.px]=\\\"this.lensBorderRadius\\\"\\n    >\\n        <img\\n            #fullSizeImage\\n            class=\\\"ngxImageZoomFull\\\"\\n            [alt]=\\\"altText\\\"\\n            [title]=\\\"titleText\\\"\\n            [src]=\\\"fullImage\\\"\\n            (load)=\\\"onFullImageLoaded()\\\"\\n            [style.display]=\\\"this.display\\\"\\n            [style.top.px]=\\\"this.fullImageTop\\\"\\n            [style.left.px]=\\\"this.fullImageLeft\\\"\\n            [style.width.px]=\\\"this.magnifiedWidth\\\"\\n            [style.height.px]=\\\"this.magnifiedHeight\\\"\\n        />\\n    </div>\\n</div>\\n\", styles: [\".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { zoomContainer: [{\r\n                type: ViewChild,\r\n                args: ['zoomContainer', { static: true }]\r\n            }], imageThumbnail: [{\r\n                type: ViewChild,\r\n                args: ['imageThumbnail', { static: true }]\r\n            }], fullSizeImage: [{\r\n                type: ViewChild,\r\n                args: ['fullSizeImage', { static: true }]\r\n            }], zoomScroll: [{\r\n                type: Output\r\n            }], zoomPosition: [{\r\n                type: Output\r\n            }], imagesLoaded: [{\r\n                type: Output\r\n            }], setThumbImage: [{\r\n                type: Input,\r\n                args: ['thumbImage']\r\n            }], setFullImage: [{\r\n                type: Input,\r\n                args: ['fullImage']\r\n            }], setZoomMode: [{\r\n                type: Input,\r\n                args: ['zoomMode']\r\n            }], setMagnification: [{\r\n                type: Input,\r\n                args: ['magnification']\r\n            }], setMinZoomRatio: [{\r\n                type: Input,\r\n                args: ['minZoomRatio']\r\n            }], setMaxZoomRatio: [{\r\n                type: Input,\r\n                args: ['maxZoomRatio']\r\n            }], setScrollStepSize: [{\r\n                type: Input,\r\n                args: ['scrollStepSize']\r\n            }], setEnableLens: [{\r\n                type: Input,\r\n                args: ['enableLens']\r\n            }], setLensWidth: [{\r\n                type: Input,\r\n                args: ['lensWidth']\r\n            }], setLensHeight: [{\r\n                type: Input,\r\n                args: ['lensHeight']\r\n            }], setCircularLens: [{\r\n                type: Input,\r\n                args: ['circularLens']\r\n            }], setEnableScrollZoom: [{\r\n                type: Input,\r\n                args: ['enableScrollZoom']\r\n            }], altText: [{\r\n                type: Input\r\n            }], titleText: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxImageZoomModule {\r\n}\r\nNgxImageZoomModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NgxImageZoomModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxImageZoomModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NgxImageZoomModule, declarations: [NgxImageZoomComponent], imports: [CommonModule], exports: [NgxImageZoomComponent] });\r\nNgxImageZoomModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NgxImageZoomModule, imports: [[\r\n            CommonModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NgxImageZoomModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxImageZoomComponent,\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                    ],\r\n                    exports: [\r\n                        NgxImageZoomComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-image-zoom\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxImageZoomComponent, NgxImageZoomModule };\n"]},"metadata":{},"sourceType":"module"}